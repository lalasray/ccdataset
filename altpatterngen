import numpy as np
import argparse
import os
from PIL import Image
from datetime import datetime
import cv2

def argument_parser():
    ap = argparse.ArgumentParser()
    ap.add_argument("-r", "--rows-grid-num", required=True, type=int,
                    help="Number of grid for height.")
    ap.add_argument("-c", "--columns-grid-num", required=True, type=int,
                    help="Number of grid for width.")
    ap.add_argument("-s", "--circle-size-px", required=True, type=int,
                    help="Size of circle element in px.")
    ap.add_argument("-o", "--output-file-name", required=False, type=str, default="Circlegrid_" + f"{datetime.now():%Y%m%d_%H%M%S}",
                    help="Name of output pdf file.")

    return vars(ap.parse_args())

def generate_circlegrid(rows_num, columns_num, circle_size, output_name, output_path):
    circle_size = circle_size * 4
    image_width = circle_size * columns_num
    image_height = circle_size * rows_num
    checker_board = np.zeros((image_height, image_width, 3), np.uint8)

    color_row = 0
    color_column = 0

    for i in range(0, image_height, circle_size):
            color_row = not color_row
            color_column = color_row

            for j in range(0, image_width, circle_size):
                if color_column:
                    cv2.circle(checker_board, center=(i+int(circle_size/2), j+int(circle_size/2)), radius=int(circle_size/2),
                               color=(255,255,255),thickness=-1)
                color_column = not color_column
    return checker_board
def save_img_to_pdf(file_name, img, saveTo):
    if not os.path.exists(saveTo):
        os.makedirs(saveTo)
    img = Image.fromarray(img)

    try:
        img.save(saveTo + "/" + file_name + ".png", resolution=100.0, save_all = True)
    except Exception as ex:
        print("Error while saving file.")
        print(ex)
        return False
    else: return True

def main():
    args = argument_parser()

    rows_num = args['rows_grid_num']
    columns_num = args['columns_grid_num']
    circle_size = args['circle_size_px']
    output_name = args['output_file_name']
    output_path = "."

    print('Generating checkerboard...')
    checker_board = generate_circlegrid(rows_num, columns_num,circle_size, output_name, output_path)
    checker_board = cv2.bitwise_not(checker_board)

    success = save_img_to_pdf(output_name, checker_board, output_path)
    print(f'File {output_name}.png has saved to: {os.path.abspath(output_path)}') if success else print('Something goes wrong...')

if __name__ == '__main__':
    main()
else:
    pass